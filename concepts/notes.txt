Horizontal Scaling
	Act of adding more servers to serve the increase in demand of web/api requests is called Horizontal Scaling.

Vertical Scaling
	Act of adding more HARDWARE (RAM/Processing) to a single serve so that it can serve more requests


Question:  Given A and B below, find the users who have not filled in Google Form

A. Google Form Data (EXCEL)
RollNumber	Name	Response


B. Master Data (EXCEL)
RollNumber	Email	YearOfGraduation

Solution
1.  Read A into a JSON Array and a RollNumberSet (set<string> st1)
2.  Read B into a JSON Array and a RollNumberSet (set<string> st2)
3.  Find diff of st2 and st1


Will be covering following concepts today before starting project work

1.  Reading and Importing Data (CSV, JSON, EXCEL)
	- Generate Data
	- Search Online Data
	- Importing 
	1000 entries

	MongoDB supports importing CSV data or JSON data directly into it
	https://github.com/ozlerhakan/mongodb-json-files/tree/master/datasets
2.  async Module
	- process data in loops with callbacks
2.  promise, async, await
	
    var UserModel = require('./....')

    Get all users from db
    
    UserModel.find({}, function(err, usersArray){
    });


    userLib.js

     // Once this function is done, it will call the callback function with two parameters
     // err, result
     module.exports.getAllUsersWithCallback = function(cb){
            UserModel.find({}, function(err, usersArray){
                   cb(err, usersArray);
            });
     }

     module.exports.getAllUsers = function(req, res){
            module.exports.getAllUsersWithCallback(function(err, usersArray){
		res.json(usersArray);
            });
     }


    apiRoutes.js
    app.get('/api/users', userLib.getAllUsers);



Callback Concept/Async Function Concept

1.  Pass Callback as last parameter and callback function should get result back

	function addAsync(a, b, cb){
             cb(a+b);
        } 
        
        addAsync(3, 4, function(result){
        });

2.  Pass Callback as last parameter and callback function should get two params 
    a. error b. result

	function addAsync(a, b, cb){
             cb(null, a+b);
        } 
        
        addAsync(3, 4, function(err, result){
        });

3.  Apart from needed parameters, Pass 2 Callbacks one for success and another for failure
    success will get result back
    failures will get error back
	function divAsync(a, b, successCallback, failureCallback){
             if(b==0){
                  failureCallback('Can not divide by zero');
             }
             else{
		  successCallback(a/b);
             }
        } 
        
        divAsync(3, 4, 
          function(result){
          }, 
          function(err){
          }
       );


Using Promises
===============

       function divPromise(a, b, resolve, reject){
             return new Promise(function(resolve, reject){
                if(b==0){
                  reject('Can not divide by zero');
               }
               else{
		  resolve(a/b);
               }
            )};
        } 

    // Callers
    divPromise(3, 4)
      .then(function(result){
      })
      .catch(function(err){
      });